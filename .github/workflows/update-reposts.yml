name: Update Latest Repositories (safe)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update README using Octokit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // 1) fetch README (to get current content & sha)
            const readmeResp = await github.rest.repos.getContent({
              owner,
              repo,
              path: "README.md",
            });
            const sha = readmeResp.data.sha;
            const encoding = readmeResp.data.encoding || "base64";
            const contentRaw = Buffer.from(readmeResp.data.content, encoding).toString("utf8");

            // 2) fetch latest repos (top 6 updated)
            const reposResp = await github.rest.repos.listForUser({
              username: owner,
              sort: "updated",
              per_page: 6,
            });
            const latest = reposResp.data.map(r => {
              const desc = r.description ? ` — ${r.description.replace(/\n/g, ' ')}` : "";
              return `- [${r.name}](${r.html_url})${desc}`;
            }).join("\n");

            // 3) build replacement block
            const start = "<!-- REPOSTS:START -->";
            const end = "<!-- REPOSTS:END -->";
            const block = `${start}\n${latest}\n${end}`;

            // 4) replace or append the block
            let newContent;
            const markerRegex = new RegExp(`${start}[\\s\\S]*?${end}`, "m");
            if (markerRegex.test(contentRaw)) {
              newContent = contentRaw.replace(markerRegex, block);
            } else {
              // append at end if markers not found
              newContent = contentRaw.trimEnd() + "\n\n" + block + "\n";
            }

            if (newContent === contentRaw) {
              core.info("No changes to README.md — nothing to commit.");
              return;
            }

            // 5) commit via API
            const newContentBase64 = Buffer.from(newContent, "utf8").toString("base64");
            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: "README.md",
              message: "chore: update latest repos (automated)",
              content: newContentBase64,
              sha,
              committer: { name: "github-actions[bot]", email: "github-actions[bot]@users.noreply.github.com" },
              author: { name: "github-actions[bot]", email: "github-actions[bot]@users.noreply.github.com" }
            });

            core.info("README.md updated successfully.");
